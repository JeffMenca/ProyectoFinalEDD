
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzers;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import Objects.*;
import btree.*;
import Classes.*;
import javax.swing.JOptionPane;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\004\014\000\002\003\016\000\002" +
    "\003\016\000\002\005\014\000\002\006\010\000\002\007" +
    "\014\000\002\010\016\000\002\011\024\000\002\012\016" +
    "\000\002\013\003\000\002\013\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\024\003\013\011\015\012\014\013\021\014" +
    "\012\015\004\016\022\017\007\020\011\001\002\000\004" +
    "\005\145\001\002\000\004\002\ufff9\001\002\000\004\002" +
    "\ufffc\001\002\000\004\005\124\001\002\000\004\002\uffff" +
    "\001\002\000\004\005\111\001\002\000\004\005\104\001" +
    "\002\000\004\002\ufff8\001\002\000\004\005\065\001\002" +
    "\000\004\005\054\001\002\000\004\002\ufffa\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\ufffd\001\002\000\004" +
    "\005\043\001\002\000\004\005\027\001\002\000\004\002" +
    "\000\001\002\000\004\002\026\001\002\000\004\002\ufffb" +
    "\001\002\000\004\002\001\001\002\000\004\004\030\001" +
    "\002\000\004\007\031\001\002\000\004\021\032\001\002" +
    "\000\004\007\033\001\002\000\004\004\034\001\002\000" +
    "\004\007\035\001\002\000\004\004\036\001\002\000\004" +
    "\006\037\001\002\000\004\010\040\001\002\000\026\002" +
    "\uffed\003\013\011\015\012\014\013\021\014\012\015\004" +
    "\016\022\017\007\020\011\001\002\000\004\002\ufff1\001" +
    "\002\000\004\002\uffee\001\002\000\004\004\044\001\002" +
    "\000\004\007\045\001\002\000\004\021\046\001\002\000" +
    "\004\007\047\001\002\000\004\021\050\001\002\000\004" +
    "\006\051\001\002\000\004\010\052\001\002\000\026\002" +
    "\uffed\003\013\011\015\012\014\013\021\014\012\015\004" +
    "\016\022\017\007\020\011\001\002\000\004\002\ufff4\001" +
    "\002\000\004\004\055\001\002\000\004\007\056\001\002" +
    "\000\004\021\057\001\002\000\004\007\060\001\002\000" +
    "\004\021\061\001\002\000\004\006\062\001\002\000\004" +
    "\010\063\001\002\000\026\002\uffed\003\013\011\015\012" +
    "\014\013\021\014\012\015\004\016\022\017\007\020\011" +
    "\001\002\000\004\002\ufff7\001\002\000\004\004\066\001" +
    "\002\000\004\007\067\001\002\000\004\021\070\001\002" +
    "\000\004\007\071\001\002\000\004\021\072\001\002\000" +
    "\004\007\073\001\002\000\006\023\075\024\074\001\002" +
    "\000\004\006\101\001\002\000\004\006\076\001\002\000" +
    "\004\010\077\001\002\000\026\002\uffed\003\013\011\015" +
    "\012\014\013\021\014\012\015\004\016\022\017\007\020" +
    "\011\001\002\000\004\002\ufff6\001\002\000\004\010\102" +
    "\001\002\000\026\002\uffed\003\013\011\015\012\014\013" +
    "\021\014\012\015\004\016\022\017\007\020\011\001\002" +
    "\000\004\002\ufff5\001\002\000\004\021\105\001\002\000" +
    "\004\006\106\001\002\000\004\010\107\001\002\000\026" +
    "\002\uffed\003\013\011\015\012\014\013\021\014\012\015" +
    "\004\016\022\017\007\020\011\001\002\000\004\002\ufff3" +
    "\001\002\000\004\004\112\001\002\000\004\007\113\001" +
    "\002\000\004\004\114\001\002\000\004\007\115\001\002" +
    "\000\004\004\116\001\002\000\004\007\117\001\002\000" +
    "\004\004\120\001\002\000\004\006\121\001\002\000\004" +
    "\010\122\001\002\000\026\002\uffed\003\013\011\015\012" +
    "\014\013\021\014\012\015\004\016\022\017\007\020\011" +
    "\001\002\000\004\002\uffef\001\002\000\004\004\125\001" +
    "\002\000\004\007\126\001\002\000\004\021\127\001\002" +
    "\000\004\007\130\001\002\000\004\021\131\001\002\000" +
    "\004\007\132\001\002\000\004\004\133\001\002\000\004" +
    "\007\134\001\002\000\004\004\135\001\002\000\004\007" +
    "\136\001\002\000\004\022\137\001\002\000\004\007\140" +
    "\001\002\000\004\004\141\001\002\000\004\006\142\001" +
    "\002\000\004\010\143\001\002\000\026\002\uffed\003\013" +
    "\011\015\012\014\013\021\014\012\015\004\016\022\017" +
    "\007\020\011\001\002\000\004\002\ufff0\001\002\000\004" +
    "\021\146\001\002\000\004\007\147\001\002\000\004\004" +
    "\150\001\002\000\004\007\151\001\002\000\004\004\152" +
    "\001\002\000\004\006\153\001\002\000\004\010\154\001" +
    "\002\000\026\002\uffed\003\013\011\015\012\014\013\021" +
    "\014\012\015\004\016\022\017\007\020\011\001\002\000" +
    "\004\002\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\024\002\023\003\007\004\022\005\016\006" +
    "\017\007\005\010\024\011\015\012\004\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\041\003\007\004" +
    "\022\005\016\006\017\007\005\010\024\011\015\012\004" +
    "\013\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\041\003\007\004\022\005\016\006\017" +
    "\007\005\010\024\011\015\012\004\013\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\041\003\007\004\022" +
    "\005\016\006\017\007\005\010\024\011\015\012\004\013" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\041\003" +
    "\007\004\022\005\016\006\017\007\005\010\024\011\015" +
    "\012\004\013\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\041\003\007\004\022\005\016\006\017" +
    "\007\005\010\024\011\015\012\004\013\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\041\003\007\004\022\005\016\006" +
    "\017\007\005\010\024\011\015\012\004\013\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\041\003\007\004\022\005\016\006\017" +
    "\007\005\010\024\011\015\012\004\013\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\002\041\003\007\004\022\005\016\006\017\007\005\010" +
    "\024\011\015\012\004\013\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\041\003\007\004\022\005\016\006" +
    "\017\007\005\010\024\011\015\012\004\013\154\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //Listas
    private ArrayList<Estudiante> estudiantesList = new ArrayList<>();
    private ArrayList<Usuario> usuariosList = new ArrayList<>();
    private ArrayList<Edificio> edificiosList = new ArrayList<>();
    private ArrayList<Salon> salonesList = new ArrayList<>();
    private ArrayList<Catedratico> catedraticosList = new ArrayList<>();
    private ArrayList<Curso> cursosList = new ArrayList<>();
    private ArrayList<Horario> horariosList = new ArrayList<>();
    private ArrayList<Asignar> asignacionesList = new ArrayList<>();
    //Metodos
	public Parser(Lexico lex) {
		super(lex);
	}
	@Override
        public void syntax_error(Symbol st) {
            //Reporte el error
        	Token token = (Token) st.value;
            report_error("Error Sintactico con el  Token:"+ token.getLexeme()+" este no pertenece a la estructura - linea: "+token.getLine()+" - columna: "+token.getColumn() + "\n",null);
        }
    //Metodos de array
        public ArrayList getEstudiantesList(){ 
	        return estudiantesList;
	    }
        public void addEstudiantesList(Estudiante objeto){
            try {
                 estudiantesList.add(objeto);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }
        public ArrayList getUsuarioList(){ 
	        return usuariosList;
	    }
        public void addUsuariosList(Usuario objeto){
            try {
                 usuariosList.add(objeto);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }
        public ArrayList getEdificiosList(){ 
	        return edificiosList;
	    }
        public void addEdificiosList(Edificio objeto){
            try {
                 edificiosList.add(objeto);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }
        public ArrayList getSalonesList(){ 
	        return salonesList;
	    }
        public void addSalonesList(Salon objeto){
            try {
                 salonesList.add(objeto);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }
        public ArrayList getCatedraticosList(){ 
	        return catedraticosList;
	    }
        public void addCatedraticosList(Catedratico objeto){
            try {
                 catedraticosList.add(objeto);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }
        public ArrayList getCursosList(){ 
	        return cursosList;
	    }
        public void addCursosList(Curso objeto){
            try {
                 cursosList.add(objeto);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }
        public ArrayList getHorariosList(){ 
	        return horariosList;
	    }
        public void addHorariosList(Horario objeto){
            try {
                 horariosList.add(objeto);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }
        public ArrayList getAsignacionesList(){ 
	        return asignacionesList;
	    }
        public void addAsignacionesList(Asignar objeto){
            try {
                 asignacionesList.add(objeto);
                }
            catch(Exception e) {
                System.out.println("error encontrado: "+e);
                }
	    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CREARESTUDIANTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CREARUSUARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= CREARCATEDRATICO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= CREAREDIFICIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= CREARSALON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= CREARCURSO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= CREARHORARIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= CREARASIGNACION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en expresion");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CREARESTUDIANTE ::= ESTUDIANTE PARENTESISA ENTERO COMA STRING COMA STRING PARENTESISB PUNTOCOMA FINOINICIO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token nombre = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int direccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int direccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token direccion = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 
   String nombrePre= nombre.getLexeme();
   String nombreFinal= nombrePre.replace("\"", "");
   String direccionPre= direccion.getLexeme();
   String direccionFinal= direccionPre.replace("\"", "");
   Estudiante nuevoEstudiante = new Estudiante(Integer.valueOf(id.getLexeme()),nombreFinal, direccionFinal);
   addEstudiantesList(nuevoEstudiante);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CREARESTUDIANTE",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CREARUSUARIO ::= USUARIO PARENTESISA ENTERO COMA STRING COMA STRING COMA TIPOESTUDIANTE PARENTESISB PUNTOCOMA FINOINICIO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token nombre = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int passwordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int passwordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token password = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
String nombrePre= nombre.getLexeme();
            String nombreFinal= nombrePre.replace("\"", "");
            String passwordPre= password.getLexeme();
            String passwordFinal= passwordPre.replace("\"", "");
             Usuario nuevoUser = new Usuario(Integer.valueOf(id.getLexeme()), nombreFinal, passwordFinal, "Estudiante");
             addUsuariosList(nuevoUser);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CREARUSUARIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CREARUSUARIO ::= USUARIO PARENTESISA ENTERO COMA STRING COMA STRING COMA TIPOCOLABORADOR PARENTESISB PUNTOCOMA FINOINICIO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token nombre = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int passwordleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int passwordright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token password = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
claseMain.cantidadColaboradores++;
String nombrePre= nombre.getLexeme();
String nombreFinal= nombrePre.replace("\"", "");
String passwordPre= password.getLexeme();
String passwordFinal= passwordPre.replace("\"", "");
Usuario nuevoUser = new Usuario(claseMain.cantidadColaboradores, nombreFinal, passwordFinal, "Colaborador");
addUsuariosList(nuevoUser);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CREARUSUARIO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CREARCATEDRATICO ::= CATEDRATICO PARENTESISA ENTERO COMA STRING COMA STRING PARENTESISB PUNTOCOMA FINOINICIO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token nombre = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int direccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int direccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token direccion = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
   String nombrePre= nombre.getLexeme();
   String nombreFinal= nombrePre.replace("\"", "");
   String direccionPre= direccion.getLexeme();
   String direccionFinal= direccionPre.replace("\"", "");
    Catedratico nuevoCatedratico = new Catedratico(Integer.valueOf(id.getLexeme()), nombreFinal, direccionFinal);
    addCatedraticosList(nuevoCatedratico);


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CREARCATEDRATICO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CREAREDIFICIO ::= EDIFICIO PARENTESISA STRING PARENTESISB PUNTOCOMA FINOINICIO 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token nombre = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
    String nombrePre= nombre.getLexeme();
    String nombreFinal= nombrePre.replace("\"", "");
            Edificio nuevoEdificio = new Edificio(nombreFinal);
            addEdificiosList(nuevoEdificio);
    

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CREAREDIFICIO",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CREARSALON ::= SALON PARENTESISA STRING COMA ENTERO COMA ENTERO PARENTESISB PUNTOCOMA FINOINICIO 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token nombre = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token numero = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int capacidadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int capacidadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token capacidad = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		

    String nombrePre= nombre.getLexeme();
    String nombreFinal= nombrePre.replace("\"", "");
    Salon salon = new Salon(Integer.valueOf(numero.getLexeme()), Integer.valueOf(capacidad.getLexeme()));
    salon.setEdificio(nombreFinal);
    addSalonesList(salon);
                            

            

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CREARSALON",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CREARCURSO ::= CURSO PARENTESISA ENTERO COMA STRING COMA ENTERO COMA ENTERO PARENTESISB PUNTOCOMA FINOINICIO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token nombre = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int semestreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int semestreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token semestre = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int creditosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int creditosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token creditos = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		

    String nombrePre= nombre.getLexeme();
    String nombreFinal= nombrePre.replace("\"", "");                      
     Curso nuevoCurso = new Curso(Integer.valueOf(id.getLexeme()), nombreFinal, Integer.valueOf(semestre.getLexeme()), Integer.valueOf(creditos.getLexeme()));
     addCursosList(nuevoCurso);

                            
                        

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CREARCURSO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CREARHORARIO ::= HORARIO PARENTESISA ENTERO COMA STRING COMA STRING COMA ENTERO COMA ENTERO COMA STRINGSINCOMILLA COMA ENTERO PARENTESISB PUNTOCOMA FINOINICIO 
            {
              Object RESULT =null;
		int codigoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).left;
		int codigoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)).right;
		Token codigo = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-15)).value;
		int periodoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int periodoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		Token periodo = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int dialeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int diaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Token dia = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int cursoCupleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int cursoCupright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Token cursoCup = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int salonCupleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int salonCupright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token salonCup = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int edificioCupleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int edificioCupright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token edificioCup = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int catedraticoCupleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int catedraticoCupright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token catedraticoCup = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		

       Horario horario = new Horario(Integer.valueOf(codigo.getLexeme()), periodo.getLexeme(), dia.getLexeme(), Integer.valueOf(cursoCup.getLexeme()), Integer.valueOf(salonCup.getLexeme()), edificioCup.getLexeme(), Integer.valueOf(catedraticoCup.getLexeme()));
       addHorariosList(horario);
                                                       

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CREARHORARIO",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CREARASIGNACION ::= ASIGNAR PARENTESISA ENTERO COMA ENTERO COMA ENTERO COMA ENTERO PARENTESISB PUNTOCOMA FINOINICIO 
            {
              Object RESULT =null;
		int carnetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int carnetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Token carnet = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int horarioCupleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int horarioCupright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Token horarioCup = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int zonaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int zonaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token zona = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int examenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int examenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token examen = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		

                               
                                
Asignar asignacion = new Asignar(Integer.valueOf(carnet.getLexeme()), Integer.valueOf(horarioCup.getLexeme()), Integer.valueOf(zona.getLexeme()), Integer.valueOf(examen.getLexeme()));
addAsignacionesList(asignacion);
                              
                           

                        

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CREARASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FINOINICIO ::= INICIO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FINOINICIO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FINOINICIO ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FINOINICIO",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
